/*--------------------------------------------------------*
* Disciplina: Programaçao Estruturada e Modular *
*          Prof. Carlos Veríssimo                                    *
*--------------------------------------------------------*
* Objetivo do Programa: utilizando ponteiros     *
* Data - 01/11/2024                                               * 
* Autor: Isabella Sanae Kiyatake*
*--------------------------------------------------------*/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_PRODUTOS 100

// Estrutura para armazenar informações de um produto
typedef struct {
    int id;
    char nome[50];
    int quantidadeEmEstoque;
    double valorDoProduto;
} Produto;

// Declaração das funções CRUD
void incluirProduto(Produto *produtos, int *quantidade);
Produto* consultarProduto(Produto *produtos, int quantidade, int id);
void alterarProduto(Produto *produtos, int quantidade);
void excluirProduto(Produto *produtos, int *quantidade);
void imprimirProduto(Produto *produto);
void venderProduto(Produto *produtos, int quantidade);

// Função principal
int main() {
    Produto produtos[MAX_PRODUTOS];
    int quantidade = 0;
    int opcao;

    do {
        printf("\nMenu:\n");
        printf("1 - Incluir produto\n");
        printf("2 - Consultar produto\n");
        printf("3 - Alterar produto\n");
        printf("4 - Excluir produto\n");
        printf("5 - Vender produto\n");
        printf("0 - Sair\n");
        printf("Escolha uma opção: ");
        scanf("%d", &opcao);

        switch (opcao) {
            case 1:
                incluirProduto(produtos, &quantidade);
                break;
            case 2: {
                int id;
                printf("Digite o ID do produto a ser consultado: ");
                scanf("%d", &id);
                Produto *produto = consultarProduto(produtos, quantidade, id);
                if (produto) {
                    imprimirProduto(produto);
                } else {
                    printf("Produto não encontrado.\n");
                }
                break;
            }
            case 3:
                alterarProduto(produtos, quantidade);
                break;
            case 4:
                excluirProduto(produtos, &quantidade);
                break;
            case 5:
                venderProduto(produtos, quantidade);
                break;
            case 0:
                printf("Saindo...\n");
                break;
            default:
                printf("Opção inválida.\n");
                break;
        }
    } while (opcao != 0);

    return 0;
}

// Função para incluir um novo produto
void incluirProduto(Produto *produtos, int *quantidade) {
    if (*quantidade < MAX_PRODUTOS) {
        Produto *produto = &produtos[*quantidade];
        printf("Digite o ID do produto: ");
        scanf("%d", &produto->id);
        printf("Digite o nome do produto: ");
        scanf(" %[^\n]", produto->nome);
        printf("Digite a quantidade em estoque: ");
        scanf("%d", &produto->quantidadeEmEstoque);
        printf("Digite o valor do produto: ");
        scanf("%lf", &produto->valorDoProduto);

        (*quantidade)++;
        printf("Produto incluído com sucesso!\n");
    } else {
        printf("Capacidade máxima de produtos atingida.\n");
    }
}

// Função para consultar um produto pelo ID
Produto* consultarProduto(Produto *produtos, int quantidade, int id) {
    for (int i = 0; i < quantidade; i++) {
        if (produtos[i].id == id) {
            return &produtos[i];
        }
    }
    return NULL;
}

// Função para alterar um produto pelo ID
void alterarProduto(Produto *produtos, int quantidade) {
    int id;
    printf("Digite o ID do produto a ser alterado: ");
    scanf("%d", &id);

    Produto *produto = consultarProduto(produtos, quantidade, id);
    if (produto) {
        printf("Digite o novo nome do produto: ");
        scanf(" %[^\n]", produto->nome);
        printf("Digite a nova quantidade em estoque: ");
        scanf("%d", &produto->quantidadeEmEstoque);
        printf("Digite o novo valor do produto: ");
        scanf("%lf", &produto->valorDoProduto);
        printf("Produto alterado com sucesso!\n");
    } else {
        printf("Produto não encontrado.\n");
    }
}

// Função para excluir um produto pelo ID
void excluirProduto(Produto *produtos, int *quantidade) {
    int id;
    printf("Digite o ID do produto a ser excluído: ");
    scanf("%d", &id);

    for (int i = 0; i < *quantidade; i++) {
        if (produtos[i].id == id) {
            for (int j = i; j < *quantidade - 1; j++) {
                produtos[j] = produtos[j + 1];
            }
            (*quantidade)--;
            printf("Produto excluído com sucesso!\n");
            return;
        }
    }
    printf("Produto não encontrado.\n");
}

// Função para imprimir os dados de um produto
void imprimirProduto(Produto *produto) {
    printf("ID: %d\n", produto->id);
    printf("Nome: %s\n", produto->nome);
    printf("Quantidade em Estoque: %d\n", produto->quantidadeEmEstoque);
    printf("Valor do Produto: %.2f\n", produto->valorDoProduto);
}

// Função para vender um produto, reduzindo a quantidade em estoque
void venderProduto(Produto *produtos, int quantidade) {
    int id, quantidadeVendida;
    printf("Digite o ID do produto a ser vendido: ");
    scanf("%d", &id);

    Produto *produto = consultarProduto(produtos, quantidade, id);
    if (produto) {
        printf("Digite a quantidade a ser vendida: ");
        scanf("%d", &quantidadeVendida);

        if (quantidadeVendida <= produto->quantidadeEmEstoque) {
            produto->quantidadeEmEstoque -= quantidadeVendida;
            printf("Venda realizada com sucesso!\n");
            imprimirProduto(produto);
        } else {
            printf("Quantidade em estoque insuficiente.\n");
        }
    } else {
        printf("Produto não encontrado.\n");
    }
}
